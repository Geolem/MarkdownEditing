[
	//
	// Auto-Pairing Astersisks
	//

	{ "keys": ["*"], "command": "insert_snippet", "args": {"contents": "*$0*"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_*]$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
		]
	},
	{ "keys": ["*"], "command": "insert_snippet", "args": {"contents": "*${0:$SELECTION}*"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["*"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\*", "match_all": true }
		]
	},
	{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Left Right.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "\\*$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\*", "match_all": true }
		]
	},
	{ "keys": [" "], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Start List Item.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "\\*$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\*", "match_all": true }
		]
	},
	{ "keys": ["tab"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Start List Item Tab.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "\\*$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\*", "match_all": true }
		]
	},

	//
	// Auto-Pairing Underscore
	//

	{ "keys": ["_"], "command": "insert_snippet", "args": {"contents": "_$0_"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
		]
	},
	{ "keys": ["_"], "command": "insert_snippet", "args": {"contents": "_${0:$SELECTION}_"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["_"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^_", "match_all": true }
		]
	},
	{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Left Right.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "_$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^_", "match_all": true }
		]
	},
	{ "keys": [" "], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Start List Item.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "\\_$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\_", "match_all": true }
		]
	},
	{ "keys": ["tab"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Start List Item Tab.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "\\_$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\_", "match_all": true }
		]
	},

	//
	// Auto-Pairing Inline Code
	//

	{ "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`$0`"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_`]$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
		]
	},
	{ "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`${0:$SELECTION}`"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["`"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^`", "match_all": true }
		]
	},
	{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Left Right.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "`$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^`", "match_all": true }
		]
	},

	//
	// Auto-Pairing Strike Through
	//

	{ "keys": ["~"], "command": "insert_snippet", "args": {"contents": "~~${0:$SELECTION}~~"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},

	//
	// Text Formatting Bold
	//

	{ "keys": ["alt+b"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Transform Word - Bold - Asterisk.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.bold_marker_asterisk", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
			{ "key": "following_text", "operator": "not_regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
		]
	},
	{ "keys": ["alt+b"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Transform Word - Bold.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.bold_marker_asterisk", "operator": "equal", "operand": false },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
			{ "key": "following_text", "operator": "not_regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
		]
	},
	{ "keys": ["alt+b"], "command": "insert_snippet", "args": {"contents": "**$1**"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.bold_marker_asterisk", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
		]
	},
	{ "keys": ["alt+b"], "command": "insert_snippet", "args": {"contents": "__$1__"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.bold_marker_asterisk", "operator": "equal", "operand": false },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
		]
	},
	{ "keys": ["alt+b"], "command": "insert_snippet", "args": {"contents": "**${SELECTION/(^[\\*_]*|[\\*_]*$)//g}**"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.bold_marker_asterisk", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["alt+b"], "command": "insert_snippet", "args": {"contents": "__${SELECTION/(^[\\*_]*|[\\*_]*$)//g}__"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.bold_marker_asterisk", "operator": "equal", "operand": false },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},

	//
	// Text Formatting Italic
	//

	{ "keys": ["alt+i"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Transform Word - Italic - Asterisk.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.italic_marker_asterisk", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
			{ "key": "following_text", "operator": "not_regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
		]
	},
	{ "keys": ["alt+i"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Transform Word - Italic.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.italic_marker_asterisk", "operator": "equal", "operand": false },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
			{ "key": "following_text", "operator": "not_regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
		]
	},
	{ "keys": ["alt+i"], "command": "insert_snippet", "args": {"contents": "*$0*"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.italic_marker_asterisk", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
		]
	},
	{ "keys": ["alt+i"], "command": "insert_snippet", "args": {"contents": "_$0_"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.italic_marker_asterisk", "operator": "equal", "operand": false },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
		]
	},
	{ "keys": ["alt+i"], "command": "insert_snippet", "args": {"contents": "*${SELECTION/(^[\\*_]*|[\\*_]*$)//g}*"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.italic_marker_asterisk", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["alt+i"], "command": "insert_snippet", "args": {"contents": "_${SELECTION/(^[\\*_]*|[\\*_]*$)//g}_"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.italic_marker_asterisk", "operator": "equal", "operand": false },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},

	//
	// Text Formatting Unbold
	//

	{ "keys": ["alt+b"], "command": "insert_snippet", "args": {"contents": "${SELECTION/(^[\\*_]{2}|[\\*_]{2}$)//g}"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
			{ "key": "text", "operator": "regex_match", "operand": "^[*_]{2}.*[*_]{2}$", "match_all": true }
		]
	},
	{ "keys": ["alt+b"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Transform Word - Unbold Unitalicize.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown markup.bold.markdown", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},
	{ "keys": ["alt+b"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Transform Word - Unbold Unitalicize.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "\\b__+\\S+__+$", "match_all": true }
		]
	},

	//
	// Text Formatting Unitalics
	//

	{ "keys": ["alt+i"], "command": "insert_snippet", "args": {"contents": "${SELECTION/(^[\\*_]|[\\*_]$)//g}"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
			{ "key": "text", "operator": "regex_match", "operand": "^[*_].*[*_]$", "match_all": true }
		]
	},
	{ "keys": ["alt+i"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Transform Word - Unbold Unitalicize.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown markup.italic.markdown", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},
	{ "keys": ["alt+i"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Transform Word - Unbold Unitalicize.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "\\b_(?!_)\\S+_$", "match_all": true }
		]
	},

	//
	// Headings
	//

	{ "keys": ["#"], "command": "insert_snippet", "args": {"contents": "#${0: ${SELECTION/(^ | $)//g} }#"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "#{6}", "match_all": true }
		]
	},
	{ "keys": ["#"], "command": "insert_snippet", "args": {"contents": "#${0: ${SELECTION/(^ | $)//g}}"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": false },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "#{6}", "match_all": true }
		]
	},
	{ "keys": ["#"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Padded Headline.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "#{6}", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "#+", "match_all": true }
		]
	},
	{ "keys": ["#"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Padded Headline.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": false },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "#{6}", "match_all": true }
		]
	},
	{ "keys": ["ctrl+1"], "command": "insert_snippet", "args": {"contents": "# $0"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
		]
	},
	{ "keys": ["ctrl+1"], "command": "insert_snippet", "args": {"contents": "#${0: ${SELECTION/(^( +)?(#+)?\\s*|\\s*(#+)?( +)?$)//g}}$1"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": false },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["ctrl+1"], "command": "insert_snippet", "args": {"contents": "#${0: ${SELECTION/(^( +)?(#+)?\\s*|\\s*(#+)?( +)?$)//g} }#$1"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["ctrl+2"], "command": "insert_snippet", "args": {"contents": "## $0"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
		]
	},
	{ "keys": ["ctrl+2"], "command": "insert_snippet", "args": {"contents": "##${0: ${SELECTION/(^( +)?(#+)?\\s*|\\s*(#+)?( +)?$)//g}}$1"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": false },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["ctrl+2"], "command": "insert_snippet", "args": {"contents": "##${0: ${SELECTION/(^( +)?(#+)?\\s*|\\s*(#+)?( +)?$)//g} }##$1"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["ctrl+3"], "command": "insert_snippet", "args": {"contents": "### $0"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
		]
	},
	{ "keys": ["ctrl+3"], "command": "insert_snippet", "args": {"contents": "###${0: ${SELECTION/(^( +)?(#+)?\\s*|\\s*(#+)?( +)?$)//g}}$1"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": false },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["ctrl+3"], "command": "insert_snippet", "args": {"contents": "###${0: ${SELECTION/(^( +)?(#+)?\\s*|\\s*(#+)?( +)?$)//g} }###$1"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["ctrl+4"], "command": "insert_snippet", "args": {"contents": "#### $0"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
		]
	},
	{ "keys": ["ctrl+4"], "command": "insert_snippet", "args": {"contents": "####${0: ${SELECTION/(^( +)?(#+)?\\s*|\\s*(#+)?( +)?$)//g}}$1"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": false },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["ctrl+4"], "command": "insert_snippet", "args": {"contents": "####${0: ${SELECTION/(^( +)?(#+)?\\s*|\\s*(#+)?( +)?$)//g} }####$1"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["ctrl+5"], "command": "insert_snippet", "args": {"contents": "##### $0"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
		]
	},
	{ "keys": ["ctrl+5"], "command": "insert_snippet", "args": {"contents": "#####${0: ${SELECTION/(^( +)?(#+)?\\s*|\\s*(#+)?( +)?$)//g}}$1"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": false },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["ctrl+5"], "command": "insert_snippet", "args": {"contents": "#####${0: ${SELECTION/(^( +)?(#+)?\\s*|\\s*(#+)?( +)?$)//g} }#####$1"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["ctrl+6"], "command": "insert_snippet", "args": {"contents": "###### $0"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
		]
	},
	{ "keys": ["ctrl+6"], "command": "insert_snippet", "args": {"contents": "######${0: ${SELECTION/(^( +)?(#+)?\\s*|\\s*(#+)?( +)?$)//g}}$1"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": false },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["ctrl+6"], "command": "insert_snippet", "args": {"contents": "######${0: ${SELECTION/(^( +)?(#+)?\\s*|\\s*(#+)?( +)?$)//g} }######$1"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["enter"], "command": "insert_snippet", "args": {"contents": " ${TM_CURRENT_LINE/(#+?)[^#].*$/$1\n/}"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^#+\\s+[^#]", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "#+$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\s*$", "match_all": true },
			{ "key": "auto_complete_visible", "operator": "equal", "operand": false }
		]
	},
	{ "keys": ["enter"], "command": "insert_snippet", "args": {"contents": " ${TM_CURRENT_LINE/(#+?)[^#].*$/$1\n/}"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "setting.mde.match_header_hashes", "operator": "equal", "operand": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^#+\\s+[^#]", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "#+$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\s*$", "match_all": true },
			{ "key": "setting.auto_complete_commit_on_tab" }
		]
	},
	{ "keys": ["tab"], "command": "mde_complete_underlined_headings", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^\\-+$|^\\=+$", "match_all": true },
			{ "key": "auto_complete_visible", "operator": "equal", "operand": false, "match_all": true }
		]
	},

	//
	// Folding
	//

	{ "keys": ["shift+tab"], "command": "mde_fold_section", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.fold_section", "operator": "not_equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_match", "operand": "^\\s+", "match_all": true },
			{ "key": "following_text", "operator": "not_regex_match", "operand": "^$", "match_all": true }
		]
	},
	{ "keys": ["shift+tab"], "command": "mde_fold_section", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.list", "match_all": true },
			{ "key": "setting.mde.keymap_disable.fold_section", "operator": "not_equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_match", "operand": "^\\s+", "match_all": true }
		]
	},
	{ "keys": ["shift+tab"], "command": "mde_fold_section", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.fold_section", "operator": "not_equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
			{ "key": "text", "operator": "regex_contains", "operand": "^(#{1,6}(?!#))|^(-{3,}|={3,})$"}
		]
	},
	{ "keys": ["ctrl+shift+tab"], "command": "mde_show_fold_all_sections", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.show_fold_all_sections", "operator": "not_equal", "operand": true }
		]
	},
	{ "keys": ["ctrl+shift+alt+pageup"], "command": "mde_goto_previous_heading", "args": {"same_level": true}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.goto_previous_heading", "operator": "not_equal", "operand": true }
		]
	},
	{ "keys": ["ctrl+shift+alt+pagedown"], "command": "mde_goto_next_heading", "args": {"same_level": true}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.goto_next_heading", "operator": "not_equal", "operand": true }
		]
	},
	{ "keys": ["ctrl+shift+pageup"], "command": "mde_goto_previous_heading", "args": {"same_level": false}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.goto_previous_heading", "operator": "not_equal", "operand": true }
		]
	},
	{ "keys": ["ctrl+shift+pagedown"], "command": "mde_goto_next_heading", "args": {"same_level": false}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.goto_next_heading", "operator": "not_equal", "operand": true }
		]
	},

	//
	// Lists
	//

	// Extend lists (also in block quotes)
	{ "keys": ["enter"], "command": "insert_snippet", "args": {"contents": "${TM_CURRENT_LINE/^(?:((?:\\s*>)+\\s*)?\\s*([-+*])(\\s+)).*/\n$1$2$3/}"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^((?:\\s*>)*\\s*([-+*])\\s+)\\S.*", "match_all": true },
			{ "key": "auto_complete_visible", "operator": "equal", "operand": false }
		]
	},
	{ "keys": ["enter"], "command": "insert_snippet", "args": {"contents": "${TM_CURRENT_LINE/^(?:((?:\\s*>)+\\s*)?\\s*([-+*])(\\s+)).*/\n$1$2$3/}"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^((?:\\s*>)*\\s*([-+*])\\s+)\\S.*", "match_all": true },
			{ "key": "setting.auto_complete_commit_on_tab" }
		]
	},
	// Extend lists with GFM tasks (also in block quotes)
	{ "keys": ["enter"], "command": "insert_snippet", "args": {"contents": "${TM_CURRENT_LINE/^(?:((?:\\s*>)+\\s*)?\\s*([-+*])(\\s+)\\[[ xX]\\](\\s+)).*/\n$1$2$3[ ]$4/}"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^((?:\\s*>)*\\s*([-+*])\\s+)\\[[ xX]\\]\\s+\\S.*", "match_all": true },
			{ "key": "auto_complete_visible", "operator": "equal", "operand": false }
		]
	},
	{ "keys": ["enter"], "command": "insert_snippet", "args": {"contents": "${TM_CURRENT_LINE/^(?:((?:\\s*>)+\\s*)?\\s*([-+*])(\\s+)\\[[ xX]\\](\\s+)).*/\n$1$2$3[ ]$4/}"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^((?:\\s*>)*\\s*([-+*])\\s+)\\[[ xX]\\]\\s+\\S.*", "match_all": true },
			{ "key": "setting.auto_complete_commit_on_tab" }
		]
	},
	// Extend Numbered Lists
	{ "keys": ["enter"], "command": "mde_number_list", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^(\\s*(\\d+\\.)\\s+)\\S.*", "match_all": true },
			{ "key": "auto_complete_visible", "operator": "equal", "operand": false }
		]
	},
	{ "keys": ["enter"], "command": "mde_number_list", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^(\\s*(\\d+\\.)\\s+)\\S.*", "match_all": true },
			{ "key": "setting.auto_complete_commit_on_tab" }
		]
	},
	// Remove empty list item
	{ "keys": ["enter"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Remove Empty List Item.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^(\\s*([-+*]|\\d+\\.)\\s+)$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\s*$", "match_all": true },
			{ "key": "auto_complete_visible", "operator": "equal", "operand": false }
		]
	},
	{ "keys": ["enter"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Remove Empty List Item.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^(\\s*([-+*]|\\d+\\.)\\s+)$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\s*$", "match_all": true },
			{ "key": "setting.auto_complete_commit_on_tab" }
		]
	},
	// Indent list item
	{ "keys": ["tab"], "command": "mde_indent_list_item", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*(>\\s*)?[*+\\-]\\s+$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^$", "match_all": true }
		]
	},
	{ "keys": ["tab"], "command": "mde_indent_list_item", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*(>\\s*)?$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\s*[*+\\-]\\s+", "match_all": true }
		]
	},
	{ "keys": ["tab"], "command": "mde_indent_list_multiitem", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown markup.list", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	// Unindent list item
	{ "keys": ["shift+tab"], "command": "mde_indent_list_item", "args": {"reverse": true}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*(>\\s*)?[*+\\-]\\s+$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^$", "match_all": true }
		]
	},
	{ "keys": ["shift+tab"], "command": "mde_indent_list_item", "args": {"reverse": true}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*(>\\s*)?$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\s*[*+\\-]\\s+", "match_all": true }
		]
	},
	{ "keys": ["shift+tab"], "command": "mde_indent_list_multiitem", "args": {"reverse": true}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown markup.list", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	// Toggle GFM tasks
	{ "keys": ["alt+x"], "command": "mde_toggle_task_list_item", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown & (markup.list | markup.quote)", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},

	//
	// Quotes
	//

	// Convert to blockquote
	{ "keys": [">"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Convert to Blockquote.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	// Extend blockquote (ignore lists or tasks)
	{ "keys": ["enter"], "command": "insert_snippet", "args": {"contents": "${TM_CURRENT_LINE/^\\s*((?:>+\\s+)+).*/\n$1/}"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^(?:\\s*>)+\\s*[^\\-+\\s>*]", "match_all": true },
			{ "key": "auto_complete_visible", "operator": "equal", "operand": false }
		]
	},
	{ "keys": ["enter"], "command": "insert_snippet", "args": {"contents": "${TM_CURRENT_LINE/^\\s*((?:>+\\s+)+).*/\n$1/}"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^(?:\\s*>)+\\s*[^\\-+\\s>*]", "match_all": true },
			{ "key": "setting.auto_complete_commit_on_tab" }
		]
	},
	// Remove empty blockquote line
	{ "keys": ["enter"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Remove Empty Blockquote Line.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^(\\s*((>+\\s+)+([-+*]\\s+)?))$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\s*$", "match_all": true },
			{ "key": "auto_complete_visible", "operator": "equal", "operand": false }
		]
	},
	{ "keys": ["enter"], "command": "run_macro_file", "args": {"file": "Packages/MarkdownEditing/macros/Remove Empty Blockquote Line.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^(\\s*((>+\\s+)+([-+*]\\s+)?))$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\s*$", "match_all": true },
			{ "key": "setting.auto_complete_commit_on_tab" }
		]
	},
	// Indent blockquote
	{ "keys": ["ctrl+shift+."], "command": "mde_indent_quote", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true }
		]
	},
	// Unindent blockquote
	{ "keys": ["ctrl+shift+,"], "command": "mde_unindent_quote", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "(> )+", "match_all": true }
		]
	},

	//
	// References
	//

	// Surround with <> on URLs, regex copied from https://mathiasbynens.be/demo/url-regex, @diegoperini (502 chars)
	{ "keys": ["<"], "command": "insert_snippet", "args": {"contents": "<${0:$SELECTION}>"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
			{ "key": "text", "operator": "regex_match", "operand": "(?:(?:https?|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\x{00a1}-\\x{ffff}0-9]+-?)*[a-z\\x{00a1}-\\x{ffff}0-9]+)(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}0-9]+-?)*[a-z\\x{00a1}-\\x{ffff}0-9]+)*(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}]{2,})))(?::\\d{2,5})?(?:/[^\\s]*)?", "match_all": true }
		]
	},
	// modify [] pairing so that selection is removed after pairing, ready for [] or ()
	{ "keys": ["["], "command": "insert_snippet", "args": {"contents": "[$SELECTION]$0"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	// inline image insertion
	{ "keys": ["ctrl+shift+k"], "command": "mde_reference_new_inline_image", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.reference_new_inline_image", "operator": "not_equal", "operand": true }
		]
	},
	// run paste as link command on selected text
	{ "keys": ["ctrl+alt+v"], "command": "mde_reference_new_inline_link", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.reference_new_inline_link", "operator": "not_equal", "operand": true }
		]
	},
	// create new footnote
	{ "keys": ["alt+shift+6"], "command": "mde_reference_new_footnote", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.reference_new_footnote", "operator": "not_equal", "operand": true }
		]
	},
	// create new reference
	{ "keys": ["ctrl+alt+r"], "command": "mde_reference_new_reference", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.reference_new_reference", "operator": "not_equal", "operand": true }
		]
	},
	// extend numbered reference if auto completion panel is not visible
	{ "keys": ["enter"], "command": "mde_add_numbered_reference_definition", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*\\[.*\\d+\\]:", "match_all": true },
			{ "key": "auto_complete_visible", "operand": false }
		]
	},
	// extend numbered reference if auto-completions are commited via tab only
	{ "keys": ["enter"], "command": "mde_add_numbered_reference_definition", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - markup.raw", "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*\\[.*\\d+\\]:", "match_all": true },
			{ "key": "setting.auto_complete_commit_on_tab" }
		]
	},
	// jump to reference
	{ "keys": ["ctrl+alt+g"], "command": "mde_reference_jump", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.reference_jump", "operator": "not_equal", "operand": true }
		]
	},
	// organize references
	{ "keys": ["ctrl+alt+s"], "command": "mde_reference_organize", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.reference_organize", "operator": "not_equal", "operand": true }
		]
	},

	//
	// Wiki
	//

	{ "keys": ["ctrl+alt+h"], "command": "mde_open_home_page", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.open_home_page", "operator": "not_equal", "operand": true }
		]
	},
	{ "keys": ["ctrl+alt+d"], "command": "mde_open_page", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "meta.link.wiki.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.open_page", "operator": "not_equal", "operand": true }
		]
	},
	{ "keys": ["ctrl+alt+d"], "command": "mde_make_page_reference", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - (meta.link.wiki | markup.underline.link)", "match_all": true },
			{ "key": "setting.mde.keymap_disable.make_page_reference", "operator": "not_equal", "operand": true }
		]
	},
	{ "keys": ["ctrl+alt+x"], "command": "mde_list_back_links", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.list_back_links", "operator": "not_equal", "operand": true }
		]
	},
	{ "keys": ["ctrl+alt+j"], "command": "mde_open_journal", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.open_journal", "operator": "not_equal", "operand": true }
		]
	}
]
